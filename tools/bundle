#!/usr/bin/env python3
# bundle
# https://git.sr.ht/~rootmos/lua-hack a09d800da1a2c2ca3f8ae827f720018e24960594
# 2025-04-18T22:21:16+02:00 SHA-256:840fd499a6a0a5efdf229e232495959fc6876b5e8479ea325549d99b4f87b2fa
# sed '2,5d' | sha256sum

import argparse
import os
import sys
import hashlib
import re
import shutil
import pathlib

from dataclasses import dataclass, field

whoami = "bundle"
env_prefix = f"{whoami.upper()}_"
def env(var, default=None):
    return os.environ.get(env_prefix + var, default)

script_dir = os.path.dirname(os.path.realpath(__file__))

import logging
logger = logging.getLogger(whoami)

def parse_args():
    parser = argparse.ArgumentParser(
            description = "Lua single-file bundler",
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument("--log", default=env("LOG_LEVEL", "WARN"), help="set log level")

    parser.add_argument("-o", "--output", metavar="OUTPUT", help="write bundle to file instead of stdout")

    parser.add_argument("main", metavar="MAIN", help="Lua source file to wrap")
    parser.add_argument("dependencies", metavar="DEPENDENCY", nargs="*", help="Lua source file to include in the bundle")

    return parser.parse_args()

def setup_logger(level):
    logger.setLevel(level)

    ch = logging.StreamHandler()
    ch.setLevel(level)

    f = logging.Formatter(fmt="%(asctime)s:%(name)s:%(levelname)s %(message)s", datefmt="%Y-%m-%dT%H:%M:%S%z")
    ch.setFormatter(f)

    logger.addHandler(ch)

@dataclass
class Module:
    lines: list[str]
    digest: str | None = None
    name: str | None = None
    path: str | None = None
    relpath: str | None = field(init=False)

    def __post_init__(self):
        if self.path is not None:
            self.relpath = os.path.relpath(self.path)

    # TODO figure out dependencies and search for them in Lua's path
    # requires: list[str] = field(init=False)
    # def __post_init__(self):
    #     for l in self.lines:
    #         pass

    @staticmethod
    def from_path(path, digest=None):

        with open(path, "rb") as f:
            digest = hashlib.file_digest(f, digest or "sha256")
        digest = f"{digest.name}:{digest.hexdigest()}"

        with open(path) as f:
            lines = f.readlines()
        for i, l in enumerate(lines):
            lines[i] = l.rstrip()

        return Module(lines=lines, path=path, digest=digest)

    def emit(self, f, indent=0):
        def do_indent():
            f.write(" " * indent)

        do_indent()
        f.write(f"-- {self.relpath or ""}\n")

        if self.digest:
            do_indent()
            f.write(f"-- {self.digest}\n")

        m = max(len(l) for l in self.lines)
        for i, l in enumerate(self.lines):
            do_indent()

            k = re.sub(r'(\W|^)require(\W|$)', r'\1_pantry\2', l)
            f.write(k)
            f.write(" "*((m + 2) - len(l)))
            f.write(f"-- {self.relpath or ""}:{i+1}\n")

def figure_out_modname_from_path(path):
    return pathlib.Path(path).stem

def main():
    args = parse_args()
    setup_logger(args.log.upper())
    logger.debug(f"args: {args}")

    o = sys.stdout
    if args.output is not None:
        o = open(args.output, "w")

    with open(os.path.join(script_dir, "pantry.lua")) as f:
        shutil.copyfileobj(f, o)
    o.write("\n")

    for path in args.dependencies:
        modname = figure_out_modname_from_path(path)
        o.write(f'_pantry["{modname}"] = function()\n')
        d = Module.from_path(path)
        d.emit(o, indent=4)
        o.write("end\n\n")

    Module.from_path(args.main).emit(o)

if __name__ == "__main__":
    main()
